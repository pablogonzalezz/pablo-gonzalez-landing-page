{"version":3,"file":"static/js/4262.f773ec5a.chunk.js","mappings":"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","sources":["common/utils/useForm.tsx","common/utils/validationRules.ts","common/TextArea/styles.tsx","common/Input/index.tsx","common/TextArea/index.tsx","components/ContactForm/index.tsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport { notification } from \"antd\";\r\n\r\ninterface IValues {\r\n  name: string;\r\n  email: string;\r\n  message: string;\r\n}\r\n\r\nconst initialValues: IValues = {\r\n  name: \"\",\r\n  email: \"\",\r\n  message: \"\",\r\n};\r\n\r\nexport const useForm = (validate: { (values: IValues): IValues }) => {\r\n  const [formState, setFormState] = useState<{\r\n    values: IValues;\r\n    errors: IValues;\r\n  }>({\r\n    values: { ...initialValues },\r\n    errors: { ...initialValues },\r\n  });\r\n\r\n  const [isLoading, setLoading] = useState<boolean>(false);\r\n\r\n  const handleSubmit = async (event: React.ChangeEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    const values = formState.values;\r\n    const errors = validate(values);\r\n    setFormState((prevState) => ({ ...prevState, errors }));\r\n\r\n    const url = \"https://formsubmit.co/contact@pablogonzalez.pt\"; // Fill in your API URL here\r\n\r\n    try {\r\n      setLoading(true);\r\n      if (Object.values(errors).every((error) => error === \"\")) {\r\n        const response = await fetch(url, {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(values),\r\n        }).finally(() => setLoading(false));\r\n\r\n        if (!response.ok) {\r\n          notification[\"error\"]({\r\n            message: \"Error\",\r\n            description:\r\n              \"There was an error sending your message, please try again later.\",\r\n          });\r\n        } else {\r\n          event.target.reset();\r\n          setFormState(() => ({\r\n            values: { ...initialValues },\r\n            errors: { ...initialValues },\r\n          }));\r\n\r\n          notification[\"success\"]({\r\n            message: \"Success\",\r\n            description: \"Your message has been sent!\",\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      notification[\"error\"]({\r\n        message: \"Error\",\r\n        description: \"Failed to submit form. Please try again later.\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleChange = (\r\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    event.persist();\r\n    const { name, value } = event.target;\r\n    setFormState((prevState) => ({\r\n      ...prevState,\r\n      values: {\r\n        ...prevState.values,\r\n        [name]: value,\r\n      },\r\n      errors: {\r\n        ...prevState.errors,\r\n        [name]: \"\",\r\n      },\r\n    }));\r\n  };\r\n\r\n  return {\r\n    handleChange,\r\n    handleSubmit,\r\n    isLoading,\r\n    values: formState.values,\r\n    errors: formState.errors,\r\n  };\r\n};\r\n","import { validateProps } from \"../../common/types\";\r\n\r\nexport default function validate(values: validateProps) {\r\n  let errors = {} as validateProps;\r\n\r\n  if (!values.name) {\r\n    errors.name = \"Name is required\";\r\n  }\r\n  if (!values.email) {\r\n    errors.email = \"Email address is required\";\r\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n    errors.email = \"Email address is invalid\";\r\n  }\r\n  if (!values.message) {\r\n    errors.message = \"Message is required\";\r\n  }\r\n  return errors;\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n  margin-bottom: -0.625rem;\r\n`;\r\n\r\nexport const StyledTextArea = styled(\"textarea\")`\r\n  resize: none;\r\n  font-size: 0.875rem;\r\n  height: 185px;\r\n`;\r\n\r\nexport const Label = styled(\"label\")`\r\n  display: block;\r\n  padding-bottom: 10px;\r\n  text-transform: capitalize;\r\n`;\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { Label } from \"../TextArea/styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst Input = ({ name, placeholder, onChange, t }: InputProps) => (\r\n  <div>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <input\r\n      placeholder={t(placeholder)}\r\n      name={name}\r\n      id={name}\r\n      onChange={onChange}\r\n    />\r\n  </div>\r\n);\r\n\r\nexport default withTranslation()(Input);\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { StyledTextArea, StyledContainer, Label } from \"./styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst TextArea = ({ name, placeholder, onChange, t }: InputProps) => (\r\n  <StyledContainer>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <StyledTextArea\r\n      placeholder={t(placeholder)}\r\n      id={name}\r\n      name={name}\r\n      onChange={onChange}\r\n    />\r\n  </StyledContainer>\r\n);\r\n\r\nexport default withTranslation()(TextArea);\r\n","import { Row, Col, Spin } from \"antd\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { Slide } from \"react-awesome-reveal\";\r\nimport { ValidationTypeProps } from \"./types\";\r\nimport { useForm } from \"../../common/utils/useForm\";\r\nimport validate from \"../../common/utils/validationRules\";\r\nimport { Button } from \"../../common/Button\";\r\nimport Input from \"../../common/Input\";\r\nimport TextArea from \"../../common/TextArea\";\r\nimport \"./styles.scss\";\r\nimport { Suspense, useEffect, useState } from \"react\";\r\nimport ContactContent from \"../../content/ContactContent.json\";\r\n\r\nconst Contact = () => {\r\n  const { values, errors, handleChange, handleSubmit, isLoading } =\r\n    useForm(validate);\r\n  const [contactData, setContactData] = useState<{ title: string }>();\r\n\r\n  useEffect(() => {\r\n    setContactData(ContactContent);\r\n  }, []);\r\n\r\n  const ValidationType = ({ type }: ValidationTypeProps) => {\r\n    const ErrorMessage = errors[type as keyof typeof errors];\r\n    return <span className=\"error-message\">{ErrorMessage}</span>;\r\n  };\r\n\r\n  return (\r\n    <section id=\"contact\" className=\"contact-section\">\r\n      <Row justify=\"center\" align=\"middle\" gutter={120} className=\"contact-row\">\r\n        <Col xl={8} lg={10} md={24} sm={24} xs={24}>\r\n          <Slide direction=\"left\" triggerOnce>\r\n            <h6>{contactData?.title}</h6>\r\n          </Slide>\r\n        </Col>\r\n        <Col xl={8} lg={10} md={24} sm={24} xs={24}>\r\n          <Slide direction=\"right\" triggerOnce>\r\n            <Spin spinning={isLoading}>\r\n              <form\r\n                className=\"contact-form\"\r\n                autoComplete=\"off\"\r\n                onSubmit={handleSubmit}\r\n              >\r\n                <Col className=\"input-col\">\r\n                  <Input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    placeholder=\"Your Name\"\r\n                    value={values.name || \"\"}\r\n                    onChange={handleChange}\r\n                  />\r\n                  <ValidationType type=\"name\" />\r\n                </Col>\r\n                <Col className=\"input-col\">\r\n                  <Input\r\n                    type=\"text\"\r\n                    name=\"email\"\r\n                    placeholder=\"Your Email\"\r\n                    value={values.email || \"\"}\r\n                    onChange={handleChange}\r\n                  />\r\n                  <ValidationType type=\"email\" />\r\n                </Col>\r\n                <Col className=\"input-col\">\r\n                  <TextArea\r\n                    placeholder=\"Your Message\"\r\n                    value={values.message || \"\"}\r\n                    name=\"message\"\r\n                    onChange={handleChange}\r\n                  />\r\n                  <ValidationType type=\"message\" />\r\n                </Col>\r\n                <Row justify=\"center\" align=\"middle\">\r\n                  <Button name=\"submit\">{\"Submit\"}</Button>\r\n                </Row>\r\n              </form>\r\n            </Spin>\r\n          </Slide>\r\n        </Col>\r\n      </Row>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Contact);\r\n"],"names":["initialValues","name","email","message","validate","values","errors","test","StyledContainer","styled","StyledTextArea","Label","withTranslation","_ref","placeholder","onChange","t","_jsxs","children","_jsx","htmlFor","id","Contact","handleChange","handleSubmit","isLoading","formState","setFormState","useState","setLoading","event","persist","value","target","prevState","async","preventDefault","Object","every","error","fetch","method","headers","body","JSON","stringify","finally","ok","reset","notification","description","useForm","contactData","setContactData","useEffect","ContactContent","ValidationType","type","ErrorMessage","className","Row","justify","align","gutter","Col","xl","lg","md","sm","xs","Slide","direction","triggerOnce","title","Spin","spinning","autoComplete","onSubmit","Input","TextArea","Button"],"sourceRoot":""}