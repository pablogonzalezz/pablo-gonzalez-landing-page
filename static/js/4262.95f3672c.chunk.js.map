{"version":3,"file":"static/js/4262.95f3672c.chunk.js","mappings":"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","sources":["common/utils/useForm.tsx","common/utils/validationRules.ts","common/TextArea/styles.tsx","common/Input/index.tsx","common/TextArea/index.tsx","components/ContactForm/index.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { notification } from \"antd\";\n\ninterface IValues {\n  name: string;\n  email: string;\n  message: string;\n}\n\nconst initialValues: IValues = {\n  name: \"\",\n  email: \"\",\n  message: \"\",\n};\n\nexport const useForm = (validate: { (values: IValues): IValues }) => {\n  const [formState, setFormState] = useState<{\n    values: IValues;\n    errors: IValues;\n  }>({\n    values: { ...initialValues },\n    errors: { ...initialValues },\n  });\n\n  const [isLoading, setLoading] = useState<boolean>(false);\n\n  const handleSubmit = async (event: React.ChangeEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const values = formState.values;\n    const errors = validate(values);\n    setFormState((prevState) => ({ ...prevState, errors }));\n\n    const url = \"https://formsubmit.co/contact@pablogonzalez.pt\"; // Fill in your API URL here\n\n    try {\n      setLoading(true);\n      if (Object.values(errors).every((error) => error === \"\")) {\n        const response = await fetch(url, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(values),\n        }).finally(() => setLoading(false));\n\n        if (!response.ok) {\n          notification[\"error\"]({\n            message: \"Error\",\n            description:\n              \"There was an error sending your message, please try again later.\",\n          });\n        } else {\n          event.target.reset();\n          setFormState(() => ({\n            values: { ...initialValues },\n            errors: { ...initialValues },\n          }));\n\n          notification[\"success\"]({\n            message: \"Success\",\n            description: \"Your message has been sent!\",\n          });\n        }\n      }\n    } catch (error) {\n      notification[\"error\"]({\n        message: \"Error\",\n        description: \"Failed to submit form. Please try again later.\",\n      });\n    }\n  };\n\n  const handleChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    event.persist();\n    const { name, value } = event.target;\n    setFormState((prevState) => ({\n      ...prevState,\n      values: {\n        ...prevState.values,\n        [name]: value,\n      },\n      errors: {\n        ...prevState.errors,\n        [name]: \"\",\n      },\n    }));\n  };\n\n  return {\n    handleChange,\n    handleSubmit,\n    isLoading,\n    values: formState.values,\n    errors: formState.errors,\n  };\n};\n","import { validateProps } from \"../../common/types\";\n\nexport default function validate(values: validateProps) {\n  let errors = {} as validateProps;\n\n  if (!values.name) {\n    errors.name = \"Name is required\";\n  }\n  if (!values.email) {\n    errors.email = \"Email address is required\";\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\n    errors.email = \"Email address is invalid\";\n  }\n  if (!values.message) {\n    errors.message = \"Message is required\";\n  }\n  return errors;\n}\n","import styled from \"styled-components\";\n\nexport const StyledContainer = styled(\"div\")`\n  display: inline-block;\n  width: 100%;\n  padding: 10px 5px;\n  margin-bottom: -0.625rem;\n`;\n\nexport const StyledTextArea = styled(\"textarea\")`\n  resize: none;\n  font-size: 0.875rem;\n  height: 185px;\n`;\n\nexport const Label = styled(\"label\")`\n  display: block;\n  padding-bottom: 10px;\n  text-transform: capitalize;\n`;\n","import { withTranslation } from \"react-i18next\";\nimport { Label } from \"../TextArea/styles\";\nimport { InputProps } from \"../types\";\n\nconst Input = ({ name, placeholder, onChange, t }: InputProps) => (\n  <div>\n    <Label htmlFor={name}>{t(name)}</Label>\n    <input\n      placeholder={t(placeholder)}\n      name={name}\n      id={name}\n      onChange={onChange}\n    />\n  </div>\n);\n\nexport default withTranslation()(Input);\n","import { withTranslation } from \"react-i18next\";\nimport { StyledTextArea, StyledContainer, Label } from \"./styles\";\nimport { InputProps } from \"../types\";\n\nconst TextArea = ({ name, placeholder, onChange, t }: InputProps) => (\n  <StyledContainer>\n    <Label htmlFor={name}>{t(name)}</Label>\n    <StyledTextArea\n      placeholder={t(placeholder)}\n      id={name}\n      name={name}\n      onChange={onChange}\n    />\n  </StyledContainer>\n);\n\nexport default withTranslation()(TextArea);\n","import { Row, Col, Spin } from \"antd\";\nimport { withTranslation } from \"react-i18next\";\nimport { Slide } from \"react-awesome-reveal\";\nimport { ValidationTypeProps } from \"./types\";\nimport { useForm } from \"../../common/utils/useForm\";\nimport validate from \"../../common/utils/validationRules\";\nimport { Button } from \"../../common/Button\";\nimport Input from \"../../common/Input\";\nimport TextArea from \"../../common/TextArea\";\nimport \"./styles.scss\";\nimport { Suspense, useEffect, useState } from \"react\";\nimport ContactContent from \"../../content/ContactContent.json\";\n\nconst Contact = () => {\n  const { values, errors, handleChange, handleSubmit, isLoading } =\n    useForm(validate);\n  const [contactData, setContactData] = useState<{ title: string }>();\n\n  useEffect(() => {\n    setContactData(ContactContent);\n  }, []);\n\n  const ValidationType = ({ type }: ValidationTypeProps) => {\n    const ErrorMessage = errors[type as keyof typeof errors];\n    return <span className=\"error-message\">{ErrorMessage}</span>;\n  };\n\n  return (\n    <section id=\"contact\" className=\"contact-section\">\n      <Row justify=\"center\" align=\"middle\" gutter={120} className=\"contact-row\">\n        <Col xl={8} lg={10} md={24} sm={24} xs={24}>\n          <Slide direction=\"left\" triggerOnce>\n            <h6>{contactData?.title}</h6>\n          </Slide>\n        </Col>\n        <Col xl={8} lg={10} md={24} sm={24} xs={24}>\n          <Slide direction=\"right\" triggerOnce>\n            <Spin spinning={isLoading}>\n              <form\n                className=\"contact-form\"\n                autoComplete=\"off\"\n                onSubmit={handleSubmit}\n              >\n                <Col className=\"input-col\">\n                  <Input\n                    type=\"text\"\n                    name=\"name\"\n                    placeholder=\"Your Name\"\n                    value={values.name || \"\"}\n                    onChange={handleChange}\n                  />\n                  <ValidationType type=\"name\" />\n                </Col>\n                <Col className=\"input-col\">\n                  <Input\n                    type=\"text\"\n                    name=\"email\"\n                    placeholder=\"Your Email\"\n                    value={values.email || \"\"}\n                    onChange={handleChange}\n                  />\n                  <ValidationType type=\"email\" />\n                </Col>\n                <Col className=\"input-col\">\n                  <TextArea\n                    placeholder=\"Your Message\"\n                    value={values.message || \"\"}\n                    name=\"message\"\n                    onChange={handleChange}\n                  />\n                  <ValidationType type=\"message\" />\n                </Col>\n                <Row justify=\"center\" align=\"middle\">\n                  <Button name=\"submit\">{\"Submit\"}</Button>\n                </Row>\n              </form>\n            </Spin>\n          </Slide>\n        </Col>\n      </Row>\n    </section>\n  );\n};\n\nexport default withTranslation()(Contact);\n"],"names":["initialValues","name","email","message","validate","values","errors","test","StyledContainer","styled","StyledTextArea","Label","withTranslation","_ref","placeholder","onChange","t","_jsxs","children","_jsx","htmlFor","id","Contact","handleChange","handleSubmit","isLoading","formState","setFormState","useState","setLoading","event","persist","value","target","prevState","async","preventDefault","Object","every","error","fetch","method","headers","body","JSON","stringify","finally","ok","reset","notification","description","useForm","contactData","setContactData","useEffect","ContactContent","ValidationType","type","ErrorMessage","className","Row","justify","align","gutter","Col","xl","lg","md","sm","xs","Slide","direction","triggerOnce","title","Spin","spinning","autoComplete","onSubmit","Input","TextArea","Button"],"sourceRoot":""}