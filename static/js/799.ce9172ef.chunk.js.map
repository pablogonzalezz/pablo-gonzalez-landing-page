{"version":3,"file":"static/js/799.ce9172ef.chunk.js","mappings":"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","sources":["components/AuthorBlock/index.tsx","components/BlogPostsBlock/index.tsx","pages/Blog/index.tsx"],"sourcesContent":["import { GithubFilled, LinkedinFilled, YoutubeFilled } from \"@ant-design/icons\";\r\nimport { Popover } from \"antd\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport \"./styles.scss\";\r\n\r\nconst AuthorBlock = ({publishDate}: any) => {\r\n  return (\r\n    <Popover\r\n      overlayStyle={{ width: 300 }}\r\n      content={\r\n        <div>\r\n          <img src=\"img/author.jpg\" alt=\"Author\" className=\"author-picture\" />\r\n          <br></br>\r\n          <strong>Pablo Gonzalez</strong>\r\n          <br></br>\r\n          <span>\r\n            Frontend Engineer. Apaixonado por desenvolvimento de interfaces\r\n            limpas e intuitivas.\r\n          </span>\r\n          <br></br>\r\n          <div className=\"social-links\">\r\n            <a href=\"https://www.linkedin.com/in/pablogonzalezzz/\">\r\n              <LinkedinFilled />\r\n            </a>\r\n            <a href=\"https://www.youtube.com/@PabloGonzalez_dev\">\r\n              <YoutubeFilled />\r\n            </a>\r\n            <a href=\"https://github.com/pablogonzalezz\">\r\n              <GithubFilled />\r\n            </a>\r\n          </div>\r\n        </div>\r\n      }\r\n    >\r\n      <img src=\"img/author.jpg\" alt=\"Author\" className=\"author-picture\" />\r\n      <div className=\"author-info\">\r\n        <p className=\"author-name\">Pablo Gonzalez</p>\r\n        <p className=\"publish-date\">Published on {publishDate}</p>\r\n      </div>\r\n    </Popover>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(AuthorBlock);\r\n","import { useEffect, useState } from \"react\";\r\nimport { BlogPostsBlockProps } from \"./types\";\r\nimport { BlogPost } from \"../../pages/Blog/types\";\r\nimport BlogPostContent from \"../../content/BlogPostsContent.json\";\r\nimport \"./styles.scss\";\r\nimport Image from \"../../common/Image\";\r\n\r\nconst BlogPostsBlock = ({ title }: BlogPostsBlockProps) => {\r\n  const [postInfo, setPostInfo] = useState<BlogPost[]>();\r\n\r\n  useEffect(() => {\r\n    const loadPostInfo = async () => {\r\n      try {\r\n        setPostInfo(BlogPostContent);\r\n      } catch (error) {\r\n        console.error(\"Error loading post info:\", error);\r\n      }\r\n    };\r\n    loadPostInfo();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"other-posts\">\r\n      <h2>{title}</h2>\r\n      <ul className=\"post-list\">\r\n        {postInfo?.map((post: BlogPost, index: number) => (\r\n          <li key={post.id} className=\"post-item\">\r\n            <Image src={post.imageUrl} key={index} className=\"thumbnail\"></Image>\r\n            <div className=\"post-info\">\r\n              <a href={`#/blog/${post.id}`}><h3 className=\"post-title\">{post.title}</h3></a>\r\n              <p className=\"post-description\">\r\n                {post.description}\r\n              </p>\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BlogPostsBlock;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport \"./styles.scss\";\r\nimport AuthorBlock from \"../../components/AuthorBlock\";\r\nimport { BlogPost } from \"./types\";\r\nimport BlogPostContent from \"../../content/BlogPostsContent.json\";\r\nimport BlogPostsBlock from \"../../components/BlogPostsBlock\";\r\n\r\nconst fetchMarkdownFile = async (filename: string): Promise<string> => {\r\n  const response = await fetch(`markdown/${filename}.md`);\r\n  if (!response.ok) {\r\n    throw new Error(\"Network response was not ok\");\r\n  }\r\n  return response.text();\r\n};\r\n\r\nconst Blog: React.FC = () => {\r\n  const { filename } = useParams<{ filename: string }>();\r\n  const [content, setContent] = useState<string>(\"\");\r\n  const [postInfo, setPostInfo] = useState<BlogPost>();\r\n\r\n  useEffect(() => {\r\n    const loadMarkdown = async () => {\r\n      try {\r\n        const markdownContent = await fetchMarkdownFile(filename);\r\n        setContent(markdownContent);\r\n      } catch (error) {\r\n        console.error(\"Error loading markdown file:\", error);\r\n        setContent(\"# Error\\nCould not load the blog post.\");\r\n      }\r\n    };\r\n\r\n    if (filename) {\r\n      loadMarkdown();\r\n    }\r\n  }, [filename]);\r\n\r\n  useEffect(() => {\r\n    const loadPostInfo = async () => {\r\n      try {\r\n        const allPostInfo: BlogPost[] = BlogPostContent;\r\n        const postInfo = allPostInfo.find((post: any) => post.id === filename);\r\n        setPostInfo(postInfo);\r\n      } catch (error) {\r\n        console.error(\"Error loading post info:\", error);\r\n      }\r\n    };\r\n\r\n    if (filename) {\r\n      loadPostInfo();\r\n    }\r\n  }, [filename]);\r\n\r\n  return (\r\n    <div className=\"blog-container\">\r\n      <div className=\"blog-meta\">\r\n        <AuthorBlock publishDate={postInfo?.publishDate} />\r\n      </div>\r\n      <hr className=\"separator-line\" />\r\n      <ReactMarkdown>{content}</ReactMarkdown>\r\n      <hr className=\"separator-line\" />\r\n      <BlogPostsBlock title={\"Other posts\"}></BlogPostsBlock>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Blog;\r\n"],"names":["withTranslation","_ref","publishDate","_jsxs","Popover","overlayStyle","width","content","children","_jsx","src","alt","className","href","LinkedinFilled","YoutubeFilled","GithubFilled","title","postInfo","setPostInfo","useState","useEffect","async","BlogPostContent","error","console","loadPostInfo","map","post","index","Image","imageUrl","id","description","Blog","filename","useParams","setContent","loadMarkdown","markdownContent","response","fetch","ok","Error","text","fetchMarkdownFile","find","AuthorBlock","ReactMarkdown","BlogPostsBlock"],"sourceRoot":""}