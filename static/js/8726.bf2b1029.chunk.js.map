{"version":3,"file":"static/js/8726.bf2b1029.chunk.js","mappings":"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","sources":["components/BlogPostsBlock/index.tsx","components/AuthorBlock/index.tsx","common/IFrame/index.tsx","pages/Blog/index.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { BlogPostsBlockProps } from \"./types\";\nimport { BlogPost } from \"../../pages/Blog/types\";\nimport BlogPostContent from \"../../content/BlogPostsContent.json\";\nimport \"./styles.scss\";\nimport Image from \"../../common/Image\";\nimport { Badge, Card, Col, Row } from \"antd\";\nimport { Slide } from \"react-awesome-reveal\";\n\nconst BlogPostsBlock = ({ title, isHomePage }: BlogPostsBlockProps) => {\n  const [postInfo, setPostInfo] = useState<BlogPost[]>();\n\n  useEffect(() => {\n    const loadPostInfo = async () => {\n      try {\n        setPostInfo(BlogPostContent);\n        if (isHomePage) {\n          setPostInfo(BlogPostContent.slice(0, 4));\n        }\n      } catch (error) {\n        console.error(\"Error loading post info:\", error);\n      }\n    };\n    loadPostInfo();\n  }, []);\n\n  if (!isHomePage) {\n    return (\n      <div className=\"other-posts\">\n        <h2>{title}</h2>\n        <ul className=\"post-list\">\n          {postInfo?.map((post: BlogPost, index: number) => (\n            <li key={post.id} className=\"post-item\">\n              <Image src={post.imageUrl} key={index} className=\"thumbnail\"></Image>\n              <div className=\"post-info\">\n                <a href={`#/blog/${post.id}`}><h3 className=\"post-title\">{post.title}</h3></a>\n                <p className=\"post-description\">\n                  {post.description}\n                </p>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  } else {\n    return (\n      <section id=\"blog\" className=\"blog-section\">\n        <Slide direction=\"right\" triggerOnce>\n          <Row align={\"middle\"} justify={\"center\"}>\n            <Col>\n              <Slide direction=\"left\" triggerOnce>\n                <Row justify=\"center\" align=\"middle\" className=\"title\">\n                  <h6>{title}</h6>\n                </Row>\n                <Row justify={\"center\"} align={\"middle\"}>\n                  {postInfo?.map((post: BlogPost, index: number) => (\n                    <Col lg={6} md={12} sm={12} xs={24} className=\"post-card\" key={index}>\n                      <Badge.Ribbon text={\"New\"} color=\"blue\" className={post.isNew ? \"ribbon\" : \"ribbon hidden\"} placement=\"start\">\n                        <Card className=\"home-posts\" hoverable cover={<Image src={post.imageUrl} key={index} className=\"home-page-thumbnail\"></Image>}>\n                          <a href={`#/blog/${post.id}`}>\n                            <p>{post.title}</p>\n                            <span>{post.description}</span>\n                          </a>\n                        </Card>\n                      </Badge.Ribbon>\n                    </Col>\n                  ))}\n                </Row>\n              </Slide>\n            </Col>\n          </Row>\n        </Slide>\n      </section>\n    );\n  }\n};\n\nexport default BlogPostsBlock;\n","import { GithubFilled, LinkedinFilled, YoutubeFilled } from \"@ant-design/icons\";\nimport { Popover } from \"antd\";\nimport { withTranslation } from \"react-i18next\";\nimport \"./styles.scss\";\n\nconst AuthorBlock = ({publishDate}: any) => {\n  return (\n    <Popover\n      overlayStyle={{ width: 300 }}\n      content={\n        <div>\n          <img src=\"img/author.jpg\" alt=\"Author\" className=\"author-picture\" />\n          <br></br>\n          <strong>Pablo Gonzalez</strong>\n          <br></br>\n          <span>\n            Frontend Engineer. Apaixonado por desenvolvimento de interfaces\n            limpas e intuitivas.\n          </span>\n          <br></br>\n          <div className=\"social-links\">\n            <a href=\"https://www.linkedin.com/in/pablogonzalezzz/\">\n              <LinkedinFilled />\n            </a>\n            <a href=\"https://www.youtube.com/@PabloGonzalez_dev\">\n              <YoutubeFilled />\n            </a>\n            <a href=\"https://github.com/pablogonzalezz\">\n              <GithubFilled />\n            </a>\n          </div>\n        </div>\n      }\n    >\n      <img src=\"img/author.jpg\" alt=\"Author\" className=\"author-picture\" />\n      <div className=\"author-info\">\n        <p className=\"author-name\">Pablo Gonzalez</p>\n        <p className=\"publish-date\">Published on {publishDate}</p>\n      </div>\n    </Popover>\n  );\n};\n\nexport default withTranslation()(AuthorBlock);\n","\nimport { IFrameProps } from \"../types\";\nimport \"./styles.scss\";\n\nconst IFrame = ({ src }: IFrameProps) => (\n    <iframe \n    width=\"560\" \n    height=\"315\" \n    className=\"embed-video\" \n    src={src} \n    title=\"YouTube video player\" \n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" \n    allowFullScreen></iframe>\n);\n\nexport default IFrame;\n","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport ReactMarkdown from \"react-markdown\";\nimport \"./styles.scss\";\nimport AuthorBlock from \"../../components/AuthorBlock\";\nimport { BlogPost } from \"./types\";\nimport BlogPostContent from \"../../content/BlogPostsContent.json\";\nimport BlogPostsBlock from \"../../components/BlogPostsBlock\";\nimport { title } from \"process\";\nimport IFrame from \"../../common/IFrame\";\n\nconst fetchMarkdownFile = async (filename: string): Promise<string> => {\n  const response = await fetch(`markdown/${filename}.md`);\n  if (!response.ok) {\n    throw new Error(\"Network response was not ok\");\n  }\n  return response.text();\n};\n\nconst Blog: React.FC = () => {\n  const { filename } = useParams<{ filename: string }>();\n  const [content, setContent] = useState<string>(\"\");\n  const [postInfo, setPostInfo] = useState<BlogPost>();\n\n  useEffect(() => {\n    const loadMarkdown = async () => {\n      try {\n        const markdownContent = await fetchMarkdownFile(filename);\n        setContent(markdownContent);\n      } catch (error) {\n        console.error(\"Error loading markdown file:\", error);\n        setContent(\"# Error\\nCould not load the blog post.\");\n      }\n    };\n\n    if (filename) {\n      loadMarkdown();\n    }\n  }, [filename]);\n\n  useEffect(() => {\n    const loadPostInfo = async () => {\n      try {\n        const allPostInfo: BlogPost[] = BlogPostContent;\n        const postInfo = allPostInfo.find((post: any) => post.id === filename);\n        setPostInfo(postInfo);\n        document.title = postInfo?.title || \"Blog Post\";\n      } catch (error) {\n        console.error(\"Error loading post info:\", error);\n      }\n    };\n\n    if (filename) {\n      loadPostInfo();\n    }\n  }, [filename]);\n\n  return (\n    <div className=\"blog-container\">\n      <div className=\"blog-meta\">\n        <AuthorBlock publishDate={postInfo?.publishDate} />\n      </div>\n      <hr className=\"separator-line\" />\n      {postInfo?.videoUrl ? \n        <IFrame src={postInfo?.videoUrl}></IFrame> : null}\n      <ReactMarkdown>{content}</ReactMarkdown>\n      <hr className=\"separator-line\" />\n      <BlogPostsBlock title={\"Other posts\"}></BlogPostsBlock>\n    </div>\n  );\n};\n\nexport default Blog;\n"],"names":["_ref","title","isHomePage","postInfo","setPostInfo","useState","useEffect","async","BlogPostContent","slice","error","console","loadPostInfo","_jsx","id","className","children","Slide","direction","triggerOnce","Row","align","justify","Col","_jsxs","map","post","index","lg","md","sm","xs","Badge","Ribbon","text","color","isNew","placement","Card","hoverable","cover","Image","src","imageUrl","href","description","withTranslation","publishDate","Popover","overlayStyle","width","content","alt","LinkedinFilled","YoutubeFilled","GithubFilled","height","allow","allowFullScreen","Blog","filename","useParams","setContent","loadMarkdown","markdownContent","response","fetch","ok","Error","fetchMarkdownFile","find","document","AuthorBlock","videoUrl","IFrame","ReactMarkdown","BlogPostsBlock"],"sourceRoot":""}